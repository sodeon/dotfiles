#!/bin/bash
# Cheat sheet: https://devhints.io/bash

# NOTE: bash has no boolean

# Debug:
#    +  : executed
#    ++ : executed in subshell
#    +++: executed in subshell in another subshell
set -x # activate debugging from here (-x: print command traces before executing)
set +x # stop debugging from here

# Exit script if error occurs (return value not 0)
set -e

# Exit script if using undefined variable
set -u

cd "${0%/*}"

var1="value"
var2="3 + 2"

# check if $1 exists
# -z: check variable length
# Use [[ for if/else as it enables regular expression =~ and generally results in fewer surprises by not treating it as external program inside the bracket
#     https://stackoverflow.com/questions/669452/is-double-square-brackets-preferable-over-single-square-brackets-in-ba
# if [[ ! -z $1 ]]; then # this won't work if "set -u"
if [[ ! -z ${1-} ]]; then
else
fi
# Arithmetic if/else
if (( 3 + 2 >= 5 - 1 )); then; else; fi

# case
case "$1" in
    laptop)
        ;;
    *) # default
        ;;
esac

# Array
declare -a arrayX=(1 2 3)
echo ${arrayX[@]}
echo ${arrayX[1]}

# set muliple variables from command line (space separated)
read var1 var2 <<< $(echo $windowGeometry)

# execute string (some commands need string processing to complete)
exec $cmd

functionName() {
    local variable
}

# Expansion
The order of expansions is: brace expansion; tilde expansion, parameter and variable expansion
items=(.config/$item) # e.g. $item=*.example. expanded items=(.config/aa.example .config/bb.example)

# Gotcha
Quotes (both single and double) are not indication of strings like most programming languages. They are used to turn substitution on/off.
