#!/bin/bash
#-----------------------------------------------------------------------------------------------
# Autohotkey library
#-----------------------------------------------------------------------------------------------
activeWinId() {
    windowId=`xdotool getactivewindow`
    result=$?
    echo $windowId
    return $result
}

# Deprecated: result is unreliable. e.g. getting incorrect pid from sxiv
# activeWinPid() {
#     pid=`xdotool getactivewindow getwindowpid`
#     result=$?
#     echo $pid
#     return $result
# }

# @param class/title name
# @param ahk_title
isWinActive() {
    if [[ -z ${2-} ]]; then # class
        xprop -id $(xdotool getactivewindow) | grep -q WM_CLASS.*=.*$1
        # activeWinPid | xargs -i xdotool search --all --pid {} --class $1
        return $?
    else # title
        title=`xdotool getactivewindow getwindowname`
        if echo $title | grep -E $1; then
            return 0
        else
            return 1
        fi
    fi
}

# @param class name
winExist() {
    xdotool search --class $1
    return $?
}

winActivate() {
    if [[ -z ${2-} ]]; then
        xdotool search --class $1 windowactivate
    else
        xdotool search --name  $1 windowactivate
    fi
}

isActiveWinFloating() {
    xprop -id $(xdotool getactivewindow) | grep -q "WM_STATE.*STICKY"
}

isWorkspaceEmpty() {
    (! xdotool getactivewindow) || isActiveWinFloating
}

# xdotool with the ability to bypass i3 keygrabbing
xdotool-forward() {
    i3-msg 'mode " "'
    xdotool $@
    i3-msg 'mode "default"'
}


#-----------------------------------------------------------------------------------------------
# Shortcut implementation
#-----------------------------------------------------------------------------------------------
deleteWord() {
	if isWinActive URxvt; then
		xdotool keyup p keyup control key ctrl+w
	else
		xdotool keyup p key ctrl+BackSpace
	fi
}

closeTabOrWindow() {
    if isWinActive Google-chrome || isWinActive Firefox || isWinActive Brave-browser; then
        xdotool key ctrl+w
    else
        xdotool key alt+grave
    fi
}

floatingToggled() {
    # When mpv got focused (mpv always floating), go to full screen
    if isWinActive mpv; then
        i3-msg fullscreen
    fi
}

pageup() {
    if isWinActive URxvt && ! isWinActive VIM$ ahk_title; then
		xdotool-forward keyup $1 key shift+Prior
    else
        xdotool-forward keyup $1 key Prior
    fi
}

pagedown() {
    if isWinActive URxvt && ! isWinActive VIM$ ahk_title; then
		xdotool-forward keyup $1 key shift+Next
    else
        xdotool-forward keyup $1 key Next
    fi
}

scroll() {
    if isWinActive URxvt && ! isWinActive VIM$ ahk_title; then
		xdotool keyup $2 key shift+$1
    else
        xdotool keyup $2 key $1
    fi
}

pause() {
    if winExist mpv; then
		echo cycle pause | socat - ~/.config/mpv/socket
    else
		cmus-remote -u && pkill -RTMIN+12 i3blocks
    fi
}

nextTrack() {
    if winExist mpv; then
		echo playlist-next | socat - ~/.config/mpv/socket
    else
		cmus-remote -n && pkill -RTMIN+12 i3blocks
    fi
}

prevTrack() {
    if winExist mpv; then
		echo playlist-prev | socat - ~/.config/mpv/socket
    else
		cmus-remote -r && pkill -RTMIN+12 i3blocks
    fi
}

#
# i3 and VIM navigation integration (navigation/movement/resizing)
#
focusWindow() {
    direction=$1
	case $direction in
		left)
			navKey=h;;
		right)
			navKey=l;;
		up)
			navKey=k;;
		down)
			navKey=j;;
	esac
    if isWinActive VIM$ ahk_title || isWinActive "^vim " ahk_title \
       || isWinActive Code \
       || isWinActive ^tmux$ ahk_title; then
        xdotool-forward keyup $navKey key $navKey
    elif isWinActive ^ranger ahk_title && [[ $direction == 'left' || $direction == 'right' ]]; then
        xdotool-forward keyup $navKey key $navKey
    else
		i3-msg "focus $direction"
    fi
}

moveWindow() {
    direction=$1
	case $direction in
		left)
			navKey=h;;
		right)
			navKey=l;;
		up)
			navKey=k;;
		down)
			navKey=j;;
	esac
    if isWinActive VIM$ ahk_title || isWinActive "^vim " ahk_title \
       || isWinActive Code \
       || isWinActive ^tmux$ ahk_title; then
        xdotool-forward keyup $navKey key $navKey
    else
		i3-msg "move $@"
    fi
}

resizeWindow() {
    direction="$1 $2"
	case $direction in
		"shrink width")
			navKey=h;;
		"grow width")
			navKey=l;;
		"grow height")
			navKey=k;;
		"shrink height")
			navKey=j;;
	esac
    if isWinActive VIM$ ahk_title || isWinActive "^vim " ahk_title \
       || isWinActive Code \
       || isWinActive ^tmux$ ahk_title; then
        echo "${@:3}" > /tmp/vim-tmux-i3-integration # Passing size parameters to be consumed.
        xdotool-forward keyup $navKey key $navKey
    else
		i3-msg "resize $@"
    fi
}

# Use app's built-in fullscreen mode if available
toggleFullscreen() {
    if isWinActive Google-chrome || isWinActive Firefox || isWinActive Brave-browser; then
        xdotool-forward keyup F11 key F11
    elif isWinActive Code; then # Toggle zen mode for vscode
        xdotool-forward keyup F11 key ctrl+shift+z
    else
        i3-msg "fullscreen toggle"
    fi
}

rename() {
    if isWinActive ^ranger ahk_title; then # For some reason, ranger always sees the "shift" with F2
        xdotool-forward keyup F2 key --clearmodifiers a
    else
        xdotool-forward keyup F2 key --clearmodifiers F2
    fi
}

F1() {
    i3-msg 'workspace number "1: Web "'

    if i3-msg -t get_workspaces | jq '.[] | select(.num == 1) .focused' | grep 'true'; then
        if ! xdotool getactivewindow; then
            # Chrome has a bug that won't enable dark mode for webpages on Linux: https://bugs.chromium.org/p/chromium/issues/detail?id=889087
            google-chrome --force-dark-mode
        fi
    fi
}

F2() {
    i3-msg 'workspace number "2: Term "'

    if i3-msg -t get_workspaces | jq '.[] | select(.num == 2) .focused' | grep 'true'; then
        if ! xdotool getactivewindow; then
            urxvtc
        fi
    fi
}

# File manager
F3() {
    i3-msg 'workspace number "3: File "'

    # If workspace 3 has no ranger instance, create one
    if i3-msg -t get_workspaces | jq '.[] | select(.num == 3) .focused' | grep 'true'; then
        if ! isWinActive ^ranger ahk_title; then
            urxvtc -e ranger $HOME
        fi
    fi
}


#-----------------------------------------------------------------------------------------------
# Execute
# TODO: Input validation
#-----------------------------------------------------------------------------------------------
[[ $# == 0 ]] || $@
