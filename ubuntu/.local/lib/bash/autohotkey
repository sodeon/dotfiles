#!/bin/bash
#-----------------------------------------------------------------------------------------------
# Parameters
#-----------------------------------------------------------------------------------------------
source $HOME/.config/autohotkeyrc


#-----------------------------------------------------------------------------------------------
# Autohotkey library
#-----------------------------------------------------------------------------------------------
activeWinId() {
    windowId=`xdotool getactivewindow`
    result=$?
    echo $windowId
    return $result
}

# @param class/title name
# @param ahk_title
isWinActive() {
    if [[ -z ${2-} ]]; then # class
        xprop -id $(xdotool getactivewindow) | grep -q WM_CLASS.*=.*$1
        return $?
    elif [[ ${2-} == "ahk_command" ]]; then
        xprop -id $(xdotool getactivewindow) | grep -q WM_COMMAND.*=.*$1
        return $?
    else # ahk_title
        title=`xdotool getactivewindow getwindowname`
        if echo $title | grep -E $1; then
            return 0
        else
            return 1
        fi
    fi
}

# @param class name
winExist() {
    xdotool search --class $1
    return $?
}

winActivate() {
    if [[ -z ${2-} ]]; then
        xdotool search --class $1 windowactivate
    else
        xdotool search --name  $1 windowactivate
    fi
}

isActiveWinFloating() {
    xprop -id $(xdotool getactivewindow) | grep -q "WM_STATE.*STICKY"
}

isWorkspaceEmpty() {
    (! xdotool getactivewindow) || isActiveWinFloating
}

# xdotool with the ability to bypass i3 keygrabbing
xdotool-forward() {
    i3-msg 'mode " "'
    xdotool $@
    i3-msg 'mode "default"'
}

wake-on-lan() {
    machine=$1
    if !(wol $machine); then
        notify-send -t 5000 -u critical "Wake Up Failed" "$machine"
        return 1
    fi
    notify-send.sh -t 0 -r 19 -u low "Waiting For Remote" "$machine"
    for i in {1..5}; do
        if ping -c1 $machine; then
            notify-send.sh -t $NOTIFICATION_TIMEOUT -r 19 -u low "$machine Awake Now"
            return
        fi
    done
    notify-send.sh -t $NOTIFICATION_TIMEOUT -r 19 -u critical "Remote Timeout" $machine
    return 1
}

simple-rofi() {
    local title="$1"; shift
    local width="$1"; shift
    declare -n local entries=$1 # local entries=($@) # Bash does not support array function argument. Use $entries variable name to hack/pass the $entries to function

    # Sort rofi entries. Bash associative array key sequence is random
    local pre_sort=""
    for entry in "${!entries[@]}"; do
        pre_sort=$pre_sort"$entry\n"
    done
    local rofiEntries=`printf "$pre_sort" | sort -k 1 -n`

    selection=`printf "$rofiEntries" | rofi -p "$title" -i -width -$width $ROFI_STYLES`
    [ -z $selection ] && return 1
    ${entries["$selection"]}
}


#-----------------------------------------------------------------------------------------------
# Shortcut implementation
#-----------------------------------------------------------------------------------------------
deleteWord() {
	if isWinActive URxvt; then
        xte 'keyup p' 'keydown Control_L' 'key w' 'keyup Control_L'
	else
        xte 'keyup p' 'keydown Control_L' 'key BackSpace' 'keyup Control_L'
	fi
}

deleteWordAfter() {
	if isWinActive URxvt; then
        xte 'keyup i' 'keyup Mode_switch' 'key Escape' 'key d' 'keydown Mode_switch' # escape->d is the same as alt+d in terminal
	else
        xte 'keyup i' 'keydown Control_L' 'key Delete' 'keyup Control_L'
	fi
}

deleteLine() {
	if isWinActive URxvt \
       || isWinActive Code; then
        xte 'keyup u' 'keydown Control_L' 'key u' 'keyup Control_L'
	else
        # ctrl+shift+backspace (delete before) and ctrl+shift+del (delete after)
        xte 'keyup u' 'keydown Control_L' 'keydown Shift_L' 'key BackSpace' 'key Delete' 'keyup Shift_L' 'keyup Control_L'
	fi
}

closeTabOrWindow() {
    if isWinActive $BROWSER_WIN_CLASS; then
        xte 'keydown Control_L' 'key w' 'keyup Control_L'
    else
        xte 'keydown Alt_L' 'key grave' 'keyup Alt_L'
    fi
}

# floatingToggled() {
#     # When mpv got focused (mpv always floating), go to full screen
#     if isWinActive mpv; then
#         i3-msg fullscreen
#     fi
# }

pageup() {
    if isWinActive $BROWSER_WIN_CLASS || isWinActive VIM$ ahk_title; then
        xdotool key ctrl+b
    elif isWinActive URxvt; then
		xdotool key shift+Prior
    else
        xdotool key Prior
    fi
}

pagedown() {
    if isWinActive $BROWSER_WIN_CLASS || isWinActive VIM$ ahk_title; then
        xdotool key ctrl+f
    elif isWinActive URxvt; then
		xdotool key shift+Next
    else
        xdotool key Next
    fi
}

scroll() {
    if isWinActive URxvt && ! isWinActive VIM$ ahk_title; then
		xdotool keyup $2 key shift+$1
    else
        xdotool keyup $2 key $1
    fi
}

play() { # Play if there is any paused media
    if cmus-remote -Q | grep -q "status paused"; then # Ubuntu cmus is not compiled with mpris support
		cmus-remote -p && pkill -RTMIN+12 i3blocks
    elif mpris2controller Status | grep -q "Paused"; then
        mpris2controller PlayPause
    fi
}

pause() { # Pause if there is any playing media
    if cmus-remote -Q | grep -q "status playing"; then # Ubuntu cmus is not compiled with mpris support
		cmus-remote -U && pkill -RTMIN+12 i3blocks
    elif mpris2controller Status | grep -q "Playing"; then
        mpris2controller PlayPause
    fi
}

playPause() { # Play, pause toggle
    if cmus-remote -Q | grep -q -e "status playing" -e "status paused"; then # Ubuntu cmus is not compiled with mpris support
		cmus-remote -u && pkill -RTMIN+12 i3blocks
    else
        mpris2controller PlayPause
    fi
}

nextTrack() {
    if cmus-remote -Q | grep -q "status playing"; then # Ubuntu cmus is not compiled with mpris support
		cmus-remote -n && pkill -RTMIN+12 i3blocks
    else
        mpris2controller Next
    fi
}

prevTrack() {
    if cmus-remote -Q | grep -q "status playing"; then # Ubuntu cmus is not compiled with mpris support
		cmus-remote -r && pkill -RTMIN+12 i3blocks
    else
        mpris2controller Previous
    fi
}

#
# i3 and VIM navigation integration (navigation/movement/resizing)
#
focusWindow() {
    direction=$1
	case $direction in
		left)
			navKey=h;;
		right)
			navKey=l;;
		up)
			navKey=k;;
		down)
			navKey=j;;
	esac
    if isWinActive VIM$ ahk_title || isWinActive "^vim " ahk_title \
       || isWinActive Code \
       || isWinActive ^Notebook$ ahk_title \
       || isWinActive ^tmux$ ahk_title \
       || isWinActive '^/usr/libexec/login.sh ' ahk_title; then
        xdotool-forward keyup $navKey key $navKey
    elif isWinActive ^ranger ahk_title && [[ $direction == 'left' || $direction == 'right' ]]; then
        xdotool-forward keyup $navKey key $navKey
    else
		i3-msg "focus $direction"
    fi
}

moveWindow() {
    direction=$1
	case $direction in
		left)
			navKey=h;;
		right)
			navKey=l;;
		up)
			navKey=k;;
		down)
			navKey=j;;
	esac
    if isWinActive VIM$ ahk_title || isWinActive "^vim " ahk_title \
       || isWinActive Code \
       || isWinActive ^Notebook$ ahk_title \
       || isWinActive ^tmux$ ahk_title; then
        xdotool-forward keyup $navKey key $navKey
    else
		i3-msg "move $@"
    fi
}

resizeWindow() {
    direction="$1 $2"
	case $direction in
		"shrink width")
			navKey=h;;
		"grow width")
			navKey=l;;
		"grow height")
			navKey=k;;
		"shrink height")
			navKey=j;;
	esac
    if isWinActive VIM$ ahk_title || isWinActive "^vim " ahk_title \
       || isWinActive Code \
       || isWinActive ^Notebook$ ahk_title \
       || isWinActive ^tmux$ ahk_title; then
        echo "${@:3}" > /tmp/vim-tmux-i3-integration # Passing size parameters to be consumed.
        xdotool-forward keyup $navKey key $navKey
    else
		i3-msg "resize $@"
    fi
}

# Use app's built-in fullscreen mode if available
toggleFullscreen() {
    if (isWinActive $BROWSER_WIN_CLASS); then
        if (isWinActive YouTube ahk_title || isWinActive Twitch ahk_title || isWinActive bilibili ahk_title || isWinActive Netflix ahk_title); then
            xte 'key f'
        else
            xte 'key F11'
            # i3-msg "fullscreen toggle"
        fi
    elif isWinActive Code; then # Toggle zen mode for vscode
        xdotool key ctrl+shift+z
    else
        i3-msg "fullscreen toggle"
    fi
    #i3-msg "fullscreen toggle"
}

mediaPlayerFullscreen() {
    i3-msg '[class="^mpv"] fullscreen toggle, scratchpad show'
    # i3-msg '[class="^mpv"] fullscreen toggle' && i3-msg '[class=mpv] scratchpad show'
    # i3-msg '[class="^mpv"] scratchpad show' && sleep 1.5 && i3-msg '[class="^mpv"] fullscreen'
}

workspacePicker() { i3-switch-workspace -monitor -3 -width -17 -no-fixed-num-lines -me-select-entry MouseSecondary -me-accept-entry MousePrimary -theme arc-dark-workspace-switcher.rasi; }

F1() {
    i3-msg 'workspace number "1: Web "'

    if i3-msg -t get_workspaces | jq '.[] | select(.num == 1) .focused' | grep 'true'; then
        if ! xdotool getactivewindow; then
            $BROWSER_CMD
        fi
    fi
}

F2() {
    i3-msg 'workspace number "2: Term "'

    if i3-msg -t get_workspaces | jq '.[] | select(.num == 2) .focused' | grep 'true'; then
        if ! xdotool getactivewindow; then
            urxvtc &
        fi
    fi
}

F3() {
    i3-msg 'workspace number "3: File "'

    # If workspace 3 has no ranger instance, create one
    if i3-msg -t get_workspaces | jq '.[] | select(.num == 3) .focused' | grep 'true'; then
        if ! isWinActive ranger ahk_command; then
            $FILE_CMD
        fi
    fi
}

F4() {
    i3-msg 'workspace number "4: Code "'

    if i3-msg -t get_workspaces | jq '.[] | select(.num == 4) .focused' | grep 'true'; then
        if ! xdotool getactivewindow; then
            simple-rofi Program 30 F4_ENTRIES || i3-msg "workspace back_and_forth" && return
        fi
    fi
}

F10() {
    i3-msg 'workspace number "10: G "'

    if i3-msg -t get_workspaces | jq '.[] | select(.num == 10) .focused' | grep 'true'; then
        if ! xdotool getactivewindow; then
            simple-rofi Program 28 F10_ENTRIES || i3-msg "workspace back_and_forth"
        fi
    fi
}

toggleMouseMode() {
    file='/tmp/mouse-alt'
    if [ -f $file ]; then
        rm $file
        notify-send.sh --close=10 # notify-send.sh supports expiration time and closing notifications (https://askubuntu.com/questions/110969/notify-send-ignores-timeout)
    else
        touch $file
        notify-send.sh -t 0 -r 10 -u critical Alt Mouse
    fi

    activate-hotkeys
}


#-----------------------------------------------------------------------------------------------
# Hardware control
#-----------------------------------------------------------------------------------------------
volume() {
    if [ $1 = "up" ]; then
        amixer -D pulse set Master 3%+
    elif [ $1 = "down" ]; then
        amixer -D pulse set Master 3%-
    elif [ $1 = "toggle" ]; then
        amixer -D pulse set Master toggle
    fi
    if [ `pulsemixer --get-mute` -eq 1 ]; then
        notify-send.sh -t $NOTIFICATION_TIMEOUT -r 21 -u low Mute Volume
    else
        local volume=`pulsemixer --get-volume | sed -r 's/\s+.*$//'`
        # notify-send.sh -s 21 # Workaround notify-send.sh sometimes will not close volume notification
        notify-send.sh -t $NOTIFICATION_TIMEOUT -r 21 -u low $volume Volume
    fi
    pkill -RTMIN+10 i3blocks
}

brightness() {
    if [ $1 = "up" ]; then
        monitor-control bu | xargs -d '\n' notify-send.sh -t $NOTIFICATION_TIMEOUT -r 22 -u low && pkill -RTMIN+11 i3blocks
    elif [ $1 = "down" ]; then
        monitor-control bd | xargs -d '\n' notify-send.sh -t $NOTIFICATION_TIMEOUT -r 22 -u low && pkill -RTMIN+11 i3blocks
    elif [ $1 = "toggle" ]; then
        monitor-control bs | xargs -d '\n' notify-send.sh -t $NOTIFICATION_TIMEOUT -r 22 -u low && pkill -RTMIN+11 i3blocks
    elif [ $1 = "gaming" ]; then
        monitor-control bg | xargs -d '\n' notify-send.sh -t $NOTIFICATION_TIMEOUT -r 22 -u low && pkill -RTMIN+11 i3blocks
    else
        monitor-control b  | xargs -d '\n' notify-send.sh -t $NOTIFICATION_TIMEOUT -r 22 -u low && pkill -RTMIN+11 i3blocks
    fi
} 

display-input() {
    feature_id=60

    notify-send.sh -u normal -r 101 "Switching display input..." # ddcutil is slow on NVIDIA graphics, add notification to ease slow responsieness
    if [[ $1 != "toggle" ]]; then
        ddcutil setvcp $feature_id $1
    else
        cur_input=`ddcutil getvcp $feature_id | awk '{print $NF}' | sed -e 's/.*=//' -e 's/)//'` # Get current input ID
        DISPLAY_INPUTS[${#DISPLAY_INPUTS[@]}]=${DISPLAY_INPUTS[0]}
        hit=0
        for input in ${DISPLAY_INPUTS[@]}; do
            [ $hit -eq 1 ] && ddcutil setvcp $feature_id $input && break
            [[ $input -eq $cur_input ]] && hit=1 && continue
        done
    fi
    notify-send.sh --close=101
}

suspend() {
    notify-send.sh -u critical -r 99 "Preparing to suspend..."
    sleep 0.7
    notify-send.sh --close=99
    systemctl suspend
}

display-standby() {
    sleep 0.3
    xset dpms force off
}

bluetooth-quick-connect() { toggle-bluetooth device $QUICK_CONNECT_MAC; }
# bluetooth-quick-connect() { toggle-bluetooth device $QUICK_CONNECT_MAC true; }

power-menu() {
    simple-rofi Menu 23 POWER_ENTRIES
}

bluetooth-menu() {
    simple-rofi Bluetooth 28 BLUETOOTH_ENTRIES
}

wol-menu() {
    simple-rofi Machine 15 WOL_ENTRIES
}


#-----------------------------------------------------------------------------------------------
# Execute
# TODO: Input validation
#-----------------------------------------------------------------------------------------------
[[ $# == 0 ]] || $@


# Deprecated: result is unreliable. e.g. getting incorrect pid from sxiv
# activeWinPid() {
#     pid=`xdotool getactivewindow getwindowpid`
#     result=$?
#     echo $pid
#     return $result
# }
