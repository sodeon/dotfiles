#!/bin/bash

pid=
windowId=


#-----------------------------------------------------------------------------------------------
# Support library
#-----------------------------------------------------------------------------------------------
activeWinId() {
    # cache active window id result
    if [ -z $windowId ]; then
        windowId=`xdotool getwindowfocus`
    fi
    result=$?
    echo $windowId
    return $result
}

activeWinPid() {
    # cache active window pid result
    if [ -z $pid ]; then
        pid=`xdotool getwindowfocus getwindowpid`
    fi
    result=$?
    echo $pid
    return $result
}

# @param class name
isWinActive() {
    activeWinPid | xargs -i xdotool search --all --pid {} --class $1
    return $?
}

isActiveWinTitle() {
    title=`xdotool getactivewindow getwindowname`
    if echo $title | grep -E $1; then
        return 0
    else
        return 1
    fi
}

# @param class name
isWinExists() {
    xdotool search --class $1
    return $?
}

# xdotool with the ability to bypass i3 keygrabbing
xdotool-forward() {
    i3-msg 'mode " "'
    xdotool $@
    i3-msg 'mode "default"'
}


#-----------------------------------------------------------------------------------------------
# Shortcut implementation
#-----------------------------------------------------------------------------------------------
deleteWord() {
	if isWinActive URxvt; then
		xdotool keyup p keyup control key ctrl+w
	else
		xdotool keyup p key ctrl+BackSpace
	fi
}

closeTabOrWindow() {
    if isWinActive Google-chrome || isWinActive Firefox || isWinActive Brave-browser; then
        xdotool key ctrl+w
    else
        xdotool key alt+grave
    fi
}

toggleFloating() {
    # When mpv got focused (mpv always floating), go to full screen
    if isWinActive mpv; then
        i3-msg fullscreen
    fi
}

pageup() {
    if isWinActive URxvt && ! isActiveWinTitle VIM$; then
		xdotool-forward keyup $1 key shift+Prior
    else
        xdotool-forward keyup $1 key Prior
    fi
}

pagedown() {
    if isWinActive URxvt && ! isActiveWinTitle VIM$; then
		xdotool-forward keyup $1 key shift+Next
    else
        xdotool-forward keyup $1 key Next
    fi
}

scroll() {
    if isWinActive URxvt && ! isActiveWinTitle VIM$; then
		xdotool keyup $2 key shift+$1
    else
        xdotool keyup $2 key $1
    fi
}

pause() {
    if isWinExists mpv; then
		echo cycle pause | socat - ~/.config/mpv/socket
    else
		cmus-remote -u && pkill -RTMIN+12 i3blocks
    fi
}

nextTrack() {
    if isWinExists mpv; then
		echo playlist-next | socat - ~/.config/mpv/socket
    else
		cmus-remote -n && pkill -RTMIN+12 i3blocks
    fi
}

prevTrack() {
    if isWinExists mpv; then
		echo playlist-prev | socat - ~/.config/mpv/socket
    else
		cmus-remote -r && pkill -RTMIN+12 i3blocks
    fi
}

#
# i3 and VIM navigation integration (navigation/movement/resizing)
#
focusWindow() {
    direction=$1
	case $direction in
		left)
			navKey=h;;
		right)
			navKey=l;;
		up)
			navKey=k;;
		down)
			navKey=j;;
	esac
    if isActiveWinTitle VIM$ || isActiveWinTitle "^vim " \
       || isWinActive Code \
       || isActiveWinTitle ^tmux$; then
        xdotool-forward keyup $navKey key $navKey
    elif isActiveWinTitle ^ranger && [[ $direction == 'left' || $direction == 'right' ]]; then
        xdotool-forward keyup $navKey key $navKey
    else
		i3-msg "focus $direction"
    fi
}

moveWindow() {
    direction=$1
	case $direction in
		left)
			navKey=h;;
		right)
			navKey=l;;
		up)
			navKey=k;;
		down)
			navKey=j;;
	esac
    if isActiveWinTitle VIM$ || isActiveWinTitle "^vim " \
       || isWinActive Code \
       || isActiveWinTitle ^tmux$; then
        xdotool-forward keyup $navKey key $navKey
    else
		i3-msg "move $@"
    fi
}

resizeWindow() {
    direction="$1 $2"
	case $direction in
		"shrink width")
			navKey=h;;
		"grow width")
			navKey=l;;
		"grow height")
			navKey=k;;
		"shrink height")
			navKey=j;;
	esac
    if isActiveWinTitle VIM$ || isActiveWinTitle "^vim " \
       || isWinActive Code \
       || isActiveWinTitle ^tmux$; then
        echo "${@:3}" > /tmp/vim-tmux-i3-integration # Passing size parameters to be consumed.
        xdotool-forward keyup $navKey key $navKey
    else
		i3-msg "resize $@"
    fi
}

# Use app's built-in fullscreen mode if available
toggleFullscreen() {
    if isWinActive Google-chrome || isWinActive Firefox || isWinActive Brave-browser; then
        xdotool-forward keyup F11 key F11
    elif isWinActive Code; then # Toggle zen mode for vscode
        xdotool-forward keyup F11 key ctrl+shift+z
    else
        i3-msg "fullscreen toggle"
    fi
}


#-----------------------------------------------------------------------------------------------
# Execute
# TODO: Input validation
#-----------------------------------------------------------------------------------------------
[[ $# == 0 ]] || $@
