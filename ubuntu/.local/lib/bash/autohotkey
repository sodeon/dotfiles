#!/bin/bash
#-----------------------------------------------------------------------------------------------
# Sensible default variables and overrides
#-----------------------------------------------------------------------------------------------
VOLUME_STEP=4

NOTIFICATION_TIMEOUT=1400
ROFI_STYLES="-dmenu  -no-fixed-num-lines -me-select-entry MouseSecondary -me-accept-entry MousePrimary -theme Arc-Dark.workspace-switcher.rasi"
BROWSER_WIN_CLASS="Google-chrome"

BT_QUICK_CONNECT_DEVICE='WH-1000XM4'

SUSPEND_PRE_CMD() { true; }

declare -A F4_ENTRIES=(
    [Visual Studio Code]="code --disable-gpu" # Disable GPU acceleration for VSCode. It has less memory footprint and better UI responsiveness on my machines.
)
declare -A F5_ENTRIES=(
    [Zoom Meeting]="zoom"
)
declare -A F10_ENTRIES=(
    [1. PC Gaming          ]=lutris
    [2. Retro Arcade       ]=mame
    [3. Moonlight Streaming]=moonlight
     # "ppsspp" "desmune"
)
declare -A POWER_ENTRIES=(
    [1. Display Standby]="xset dpms force off"
    [2. Suspend        ]="systemctl suspend"
    [3. Reboot         ]="reboot"
    [4. Shutdown       ]="shutdown -h now"
)
declare -A BLUETOOTH_ENTRIES=(
    [1. Power On/Off                         ]="toggle-bluetooth"
    [2. $BT_QUICK_CONNECT_DEVICE Conn/Disconn]="bluetooth-quick-connect"
)
if [ -f /tmp/connect-phonecam-ready ]; then
    declare -A WIFI_ENTRIES=(
        [1. Disconnect Phonecam (usb)]="disconnect-phonecam"
    )
else
    declare -A WIFI_ENTRIES=(
        [1. Connect Phonecam (usb)]="connect-phonecam"
    )
fi
declare -A WOL_ENTRIES=(
    [1. NAS  ]="wake-on-lan nas"
    [2. TV   ]="wake-on-lan tv"
    [3. J5005]="wake-on-lan j5005"
)
declare -A MOUSE_PROFILE_ENTRIES=(
    [1. Home/Office  ]="setup-mouse"
    [2. Game         ]="setup-mouse game-mode"
    # [3. Battery Level]="setup-mouse battery-level"
)
declare -A QUICK_COMMAND_ENTRIES=(
    [Show Battery Levels]="setup-mouse battery-level"
    [Web Browser        ]="F1"
)

# Default overrides
source $HOME/.config/autohotkeyrc


#-----------------------------------------------------------------------------------------------
# Autohotkey library
#-----------------------------------------------------------------------------------------------
activeWinId() {
    windowId=`xdotool getactivewindow`
    result=$?
    echo $windowId
    return $result
}

# @param class/title name
# @param ahk_title
isWinActive() {
    if [[ -z ${2-} ]]; then # class
        xprop -id $(xdotool getactivewindow) | grep -q WM_CLASS.*=.*$1
        return $?
    elif [[ ${2-} == "ahk_command" ]]; then
        # xprop -id $(xdotool getactivewindow) | grep WM_COMMAND | xargs -I _ notify-send _
        xprop -id $(xdotool getactivewindow) | grep -q WM_COMMAND.*=.*$1
        return $?
    else # ahk_title
        title=`xdotool getactivewindow getwindowname`
        if echo $title | grep -E $1; then
            return 0
        else
            return 1
        fi
    fi
}

# @param class name
winExist() {
    xdotool search --class $1
    return $?
}

winActivate() {
    if [[ -z ${2-} ]]; then
        xdotool search --class $1 windowactivate
    else
        xdotool search --name  $1 windowactivate
    fi
}

isActiveWinFloating() {
    xprop -id $(xdotool getactivewindow) | grep -q "WM_STATE.*STICKY"
}

isWorkspaceEmpty() {
    (! xdotool getactivewindow) || isActiveWinFloating
}

hasMultipleWindows() {
    cur_id=$(xdotool getactivewindow)
    i3-msg "focus left"
    new_id=$(xdotool getactivewindow)
    if [[ $cur_id == $new_id ]]; then
        return 1
    else
        i3-msg "focus right"
        return 0
    fi
}

isWebVideo() {
    isWinActive '\sYouTube' ahk_title || isWinActive '\sTwitch' ahk_title || isWinActive '_哔哩哔哩_bilibili' ahk_title || isWinActive '^Netflix' ahk_title
}

# xdotool with the ability to bypass i3 keygrabbing
xdotool-forward() {
    i3-msg 'mode " "'
    xdotool $@
    i3-msg 'mode "default"'
}

xte-iso() {
    xte 'keyup ISO_Level3_Shift' "$@" 'keydown ISO_Level3_Shift'
}

wake-on-lan() {
    machine=$1
    notify-send.sh -t 0 -r 19 -u low "Waiting For Remote" "$machine"
    if ping -c1 $machine; then
        notify-send.sh -t 2000 -r 19 -u low "Already Awake" "$machine"
        return 0
    fi
    if !(wol $machine); then
        notify-send.sh -t 5000 -r 19 -u critical "Wake Up Failed" "$machine"
        return 1
    fi
    for i in {1..25}; do # around 75 seconds timeout counter
        if ping -c1 $machine; then
            notify-send.sh -t $NOTIFICATION_TIMEOUT -r 19 -u low "$machine Awakened"
            return
        fi
    done
    notify-send.sh -t $NOTIFICATION_TIMEOUT -r 19 -u critical "Remote Timeout" $machine
    return 1
}

simple-rofi() {
    local title="$1"; shift
    local width="$1"; shift
    declare -n local entries=$1 # local entries=($@) # Bash does not support array function argument. Use $entries variable name to hack/pass the $entries to function

    # Sort rofi entries. Bash associative array key sequence is random
    local pre_sort=""
    for entry in "${!entries[@]}"; do
        pre_sort=$pre_sort"$entry\n"
    done
    local rofiEntries=`printf "$pre_sort" | sort -k 1 -n`

    selection=`printf "$rofiEntries" | rofi -p "$title" -i -width -$width $ROFI_STYLES`
    [ -z $selection ] && return 1
    ${entries["$selection"]}
}


#-----------------------------------------------------------------------------------------------
# Shortcut implementation
#-----------------------------------------------------------------------------------------------
previousWord() {
	if isWinActive ^ranger: ahk_title; then
        xte 'keyup r' 'keydown Alt_L'     'key Left'  'keyup Alt_L'
    else
        xte 'keyup r' 'keydown Control_L' 'key Left'  'keyup Control_L'
    fi
}

nextWord() {
	if isWinActive ^ranger: ahk_title; then
        xte 'keyup t' 'keydown Alt_L'     'key Right' 'keyup Alt_L'
    else
        xte 'keyup t' 'keydown Control_L' 'key Right' 'keyup Control_L'
    fi
}

deleteWord() {
	if isWinActive URxvt; then
        xte-iso 'keyup p' 'keydown Control_L' 'key w' 'keyup Control_L'
	else
        xte-iso 'keyup p' 'keydown Control_L' 'key BackSpace' 'keyup Control_L'
	fi
}

deleteWordAfter() {
	if isWinActive URxvt; then
        xte-iso 'keyup slash' 'keyup i' 'key Escape' 'key d' # escape->d is the same as alt+d in terminal
	else
        xte 'keyup slash' 'keyup i' 'keydown Control_L' 'key Delete' 'keyup Control_L'
	fi
}

deleteLine() {
	if isWinActive URxvt \
       || isWinActive Code; then
        xte 'keyup u' 'keydown Control_L' 'key u' 'keyup Control_L'
	else
        # ctrl+shift+backspace (delete before) and ctrl+shift+del (delete after)
        # xte 'keyup u' 'keydown Control_L' 'keydown Shift_L' 'key BackSpace' 'key Delete' 'keyup Shift_L' 'keyup Control_L'
        xte 'keyup u' 'key Home' 'keydown Shift_L' 'key End' 'keyup Shift_L' 'key BackSpace'
	fi
}

deleteFirstWord() {
	if isWinActive URxvt; then
        xte-iso 'keyup i' 'key Home' 'keyup Mode_switch' 'key Escape' 'key d' 'keydown Mode_switch' # escape->d is the same as alt+d in terminal
	else
        xte 'keyup i' 'key Home' 'keydown Control_L' 'key Delete' 'keyup Control_L'
	fi
}

closeTabOrWindow() {
    if isWinActive $BROWSER_WIN_CLASS; then
        xte 'keydown Control_L' 'key w' 'keyup Control_L'
    else
        xte 'keydown Alt_L' 'key grave' 'keyup Alt_L'
    fi
}

# floatingToggled() {
#     # When mpv got focused (mpv always floating), go to full screen
#     if isWinActive mpv; then
#         i3-msg fullscreen
#     fi
# }

halfPageUp() {
    if isWinActive $BROWSER_WIN_CLASS; then
        xdotool key v
    elif isWinActive VIM$ ahk_title; then
        xdotool key ctrl+b
    elif isWinActive URxvt; then
		xdotool key shift+Prior
    else
        xdotool key Prior
    fi
}

halfPageDown() {
    if isWinActive $BROWSER_WIN_CLASS; then
        xdotool key c
    elif isWinActive VIM$ ahk_title; then
        xdotool key ctrl+f
    elif isWinActive URxvt; then
		xdotool key shift+Next
    else
        xdotool key Next
    fi
}

scroll() {
    if isWinActive URxvt && ! isWinActive VIM$ ahk_title; then
		xdotool keyup $2 key shift+$1
    else
        xdotool keyup $2 key $1
    fi
}

normalScroll() {
    infiniteScroll stop || \
        (activate-hotkeys is-hyperscroll && activate-hotkeys scroll-mode normal)
}

play() { # Play if there is any paused media
    if mpris2controller Status | grep -q "Paused"; then
        mpris2controller PlayPause
    fi
}

pause() { # Pause if there is any playing media
    if mpris2controller Status | grep -q "Playing"; then
        mpris2controller PlayPause
    fi
}

playPause() { 
    if mpris2controller Status | grep -q "Stopped"; then
        cmus-remote --pause
    else
        mpris2controller PlayPause;
    fi
}

nextTrack() { 
    # In practical usage, if listening to music, "next track" means next track for music, not video
    if cmus-remote --query | grep -q "status playing"; then
        cmus-remote --next
    else
        mpris2controller Next
    fi
}
prevTrack() { 
    # In practical usage, if listening to music, "prev track" means prev track for music, not video
    if cmus-remote --query | grep -q "status playing"; then
        cmus-remote --prev
    else
        mpris2controller Previous
    fi
}


#
# i3 and VIM navigation integration (navigation/movement/resizing)
#
focusWindow() {
    direction=$1
	case $direction in
		left)
			navKey=h;;
		right)
			navKey=l;;
		up)
			navKey=k;;
		down)
			navKey=j;;
	esac
    if isWinActive VIM$ ahk_title || isWinActive "^vim " ahk_title \
       || isWinActive Code \
       || isWinActive ^Notebook$ ahk_title \
       || isWinActive ^tmux$ ahk_title \
       || isWinActive '^/usr/libexec/login.sh ' ahk_title; then
        xdotool-forward keyup $navKey key $navKey
    elif isWinActive ^ranger: ahk_title && [[ $direction == 'left' || $direction == 'right' ]]; then
        xdotool-forward keyup $navKey key $navKey
    else
		i3-msg "focus $direction"
    fi
}

moveWindow() {
    direction=$1
	case $direction in
		left)
			navKey=h;;
		right)
			navKey=l;;
		up)
			navKey=k;;
		down)
			navKey=j;;
	esac
    if isWinActive VIM$ ahk_title || isWinActive "^vim " ahk_title \
       || isWinActive Code \
       || isWinActive ^Notebook$ ahk_title \
       || isWinActive ^tmux$ ahk_title; then
        xdotool-forward keyup $navKey key $navKey
    else
		i3-msg "move $@"
    fi
}

resizeWindow() {
    direction="$1 $2"
	case $direction in
		"shrink width")
			navKey=h;;
		"grow width")
			navKey=l;;
		"grow height")
			navKey=k;;
		"shrink height")
			navKey=j;;
	esac
    if isWinActive VIM$ ahk_title || isWinActive "^vim " ahk_title \
       || isWinActive Code \
       || isWinActive ^Notebook$ ahk_title \
       || isWinActive ^tmux$ ahk_title; then
        echo "${@:3}" > /tmp/vim-tmux-i3-integration # Passing size parameters to be consumed.
        xdotool-forward keyup $navKey key $navKey
    else
		i3-msg "resize $@"
    fi
}

altTab() {
    i3-msg "workspace back_and_forth" && (xdotool getactivewindow) || (i3-msg "workspace back_and_forth" && i3-msg "workspace next")
}

toggleMaximizedSingleWindow() {
    # Toggle fullscreen if it is video/image. Toggle gaps if others.
    if (isWinActive $BROWSER_WIN_CLASS); then
        if isWebVideo; then
            xdotool keyup XF86Launch7 key --clearmodifiers f
        else
            i3-msg "gaps horizontal current toggle `xgetres i3wm.toggleHGap`"
        fi
    elif isWinActive Code; then # Toggle zen mode for vscode
        xdotool key --clearmodifiers ctrl+shift+z
    elif isWinActive mpv || isWinActive Sxiv; then
        i3-msg "fullscreen toggle"
    else
        i3-msg "gaps horizontal current toggle `xgetres i3wm.toggleHGap`"
    fi
}

isFullscreen() {
    xprop -id $(xdotool getactivewindow) | grep -q _NET_WM_STATE_FULLSCREEN
}

toggleMaximized() {
    if isFullscreen; then
        toggleFullscreen
        # i3-msg "layout toggle stacking split"
    elif hasMultipleWindows; then
        toggleFullscreen
        # i3-msg "layout toggle stacking split"
    else
        toggleMaximizedSingleWindow
    fi
}


# Use app's built-in fullscreen mode if available
toggleFullscreen() {
    if (isWinActive $BROWSER_WIN_CLASS); then
        if isWebVideo; then
            xdotool keyup XF86Launch7 key --clearmodifiers f
        else
            xdotool keyup XF86Launch7 key --clearmodifiers ctrl+shift+minus
            # xdotool key --clearmodifiers F11
        fi
    elif isWinActive Code; then # Toggle zen mode for vscode
        xdotool key --clearmodifiers ctrl+shift+z
    else
        i3-msg "fullscreen toggle"
    fi
}

i3toggleFullscreen() {
    xte 'keyup f'
    toggleFullscreen
    exit 0

    if isWinActive $BROWSER_WIN_CLASS; then
        xte 'keyup f' 'keyup Alt_L' 'key F11' 'keydown Alt_L'
    elif isWinActive Code; then # Toggle zen mode for vscode
        xdotool keyup f keyup Alt_L key ctrl+shift+z keydown Alt_L
    else
        i3-msg "fullscreen toggle"
    fi
}

mediaPlayerFullscreen() {
    i3-msg '[class="^mpv"] fullscreen toggle, scratchpad show'
    # i3-msg '[class="^mpv"] fullscreen toggle' && i3-msg '[class=mpv] scratchpad show'
    # i3-msg '[class="^mpv"] scratchpad show' && sleep 1.5 && i3-msg '[class="^mpv"] fullscreen'
}

toggleQBittorrent() {
    if isWinActive qbittorrent; then
        i3-msg "kill"
    else
        qbittorrent
    fi
}

# videoOrNotebook() {
#     # Switch to "viewer" worksapce if existed -> Show video floating window if existed -> show notebook
#     notebookTransparency=`xgetres i3wm.notebook.transparency || echo 44`
#     if i3-msg -t get_workspaces | grep -q '"num":9',; then
#         i3-msg 'workspace number 9'
#     else
#         i3-msg '[class="^mpv"] scratchpad show' \
#             || i3-floating-singleton tmux "Notebook" $notebookTransparency
#     fi
# }

toggleFullscreenVideo() {
    i3-msg -t get_tree | grep -q '"class":"mpv"' || return

    # If video is running on the dedicate workspace
    if i3-msg -t get_workspaces | grep -q '"num":9',; then
        i3-msg 'workspace number 9'
    else # If video is already a mini player, move to the dedicate workspace
        i3-msg '[class="^mpv"] floating toggle, fullscreen enable'
        i3-msg '[class="^mpv"] move workspace "9: Viewer "'
        i3-msg 'workspace number 9'
    fi
}

toggleMiniVideo() {
    # i3-msg -t get_tree | grep -q '"class":"mpv"' || return
    if i3-msg -t get_tree | grep -q '"class":"mpv"'; then
        # If video is running on the dedicate workspace, switch to mini player
        if i3-msg -t get_workspaces | grep -q '"num":9',; then
            i3-msg '[class="^mpv"] fullscreen disable, floating toggle, move scratchpad' 
            if i3-msg -t get_workspaces | grep -q '"num":9',; then # If current workspace is on dedicate video workspace, it is empty now
                i3-msg 'workspace back_and_forth'
            fi
            i3-msg '[class="^mpv"] scratchpad show, sticky enable, focus mode_toggle'
        else # If video is already a mini player, toggle visibility 
            i3-msg '[class="^mpv"] scratchpad show, sticky enable, focus mode_toggle'
        fi
    else
        if (isWinActive $BROWSER_WIN_CLASS) && isWebVideo; then
            xdotool keyup m key --clearmodifiers alt+p
        # else
        #     notify-send.sh "Cannot Toggle Mini Player"
        fi
    fi
}

toggleVideo() {
    if i3-msg -t get_workspaces | grep -q '"num":9',; then
        toggleFullscreenVideo
    else
        toggleMiniVideo
    fi
}

toggleVideoSize() {
    if i3-msg -t get_workspaces | grep -q '"num":9'; then
        toggleMiniVideo
    elif ! i3-msg -t get_tree | grep -q '"class":"mpv"'; then
        toggleMiniVideo
    else
        toggleFullscreenVideo
    fi
}

openBrowserVideoInMpv() {
    xdotool keyup p keyup XF86Launch4 type --clearmodifiers yy # Copy URL
    pause     # Pause current video
    sleep 0.4 # Give vimium time to copy URL to clipboard
    open-clipboard-with-mpv
}

workspacePicker() { i3-switch-workspace -monitor -3 -width -17 $ROFI_STYLES; }

infiniteScroll() {
    cmd=${1-""}
    case $cmd in
        stop)
            notify-send.sh --close=20
            infinite-scroll $@
            ;;
        down|up)
            notify-send.sh -t 0 -r 20 -u low "Scrolling"
            infinite-scroll $@
            ;;
        pause)
            infinite-scroll pause
            result=$?
            case $result in
                0)
                    notify-send.sh -t 0 -r 20 -u low "Pause Scrolling"
                    ;;
                1)
                    notify-send.sh -t 0 -r 20 -u low "Scrolling"
                    ;;
            esac
            exit $result
            ;;
        *)
            infinite-scroll $@
            ;;
    esac
}

F1() {
    i3-msg 'workspace number '${WS1_NAME-"1: Web "}

    if i3-msg -t get_workspaces | jq '.[] | select(.num == 1) .focused' | grep 'true'; then
        if ! xdotool getactivewindow; then
            WS1_CMD || \
            google-chrome --force-dark-mode --force-device-scale-factor=0.84 # Chrome has a bug that won't enable dark mode for webpages on Linux: https://bugs.chromium.org/p/chromium/issues/detail?id=889087
        fi
    fi
}

F2() {
    i3-msg 'workspace number '${WS2_NAME-"2: Term "}

    if i3-msg -t get_workspaces | jq '.[] | select(.num == 2) .focused' | grep 'true'; then
        if ! xdotool getactivewindow; then
            WS2_CMD || \
            urxvtc &
        fi
    fi
}

F3() {
    i3-msg 'workspace number '${WS3_NAME-"3: File "}

    # If workspace 3 has no ranger instance, create one
    if i3-msg -t get_workspaces | jq '.[] | select(.num == 3) .focused' | grep 'true'; then
        if ! xdotool getactivewindow; then
            WS3_CMD || \
            urxvtc -e ranger $HOME # ranger default editor: $HOME/.selected_editor; (or export VISUAL=vim;)
        fi
    fi
}

F4() {
    i3-msg 'workspace number '${WS4_NAME-"4: Code "}

    if i3-msg -t get_workspaces | jq '.[] | select(.num == 4) .focused' | grep 'true'; then
        if ! xdotool getactivewindow; then
            WS4_CMD || \
            simple-rofi Program ${F4_WIDTH-30} F4_ENTRIES || i3-msg "workspace back_and_forth" && return
        fi
    fi
}

F5() {
    i3-msg 'workspace number '${WS5_NAME-"5: Meeting "}

    if i3-msg -t get_workspaces | jq '.[] | select(.num == 5) .focused' | grep 'true'; then
        if ! xdotool getactivewindow; then
            WS5_CMD || \
            simple-rofi Program ${F5_WIDTH-25} F5_ENTRIES || i3-msg "workspace back_and_forth" && return
        fi
    fi
}

F10() {
    i3-msg 'workspace number '${WS10_NAME-"10: G "}

    if i3-msg -t get_workspaces | jq '.[] | select(.num == 10) .focused' | grep 'true'; then
        if ! xdotool getactivewindow; then
            WS10_CMD || \
            simple-rofi Program ${F10_WIDTH-28} F10_ENTRIES || i3-msg "workspace back_and_forth"
        fi
    fi
}

toggleMouseMode() {
    file='/tmp/mouse-alt'
    if [ -f $file ]; then
        rm $file
        notify-send.sh --close=10 # notify-send.sh supports expiration time and closing notifications (https://askubuntu.com/questions/110969/notify-send-ignores-timeout)
    else
        touch $file
        notify-send.sh -t 0 -r 10 -u critical Alt Mouse
    fi

    activate-hotkeys
}

notify-activate-hotkeys() {
    notify-send.sh -t 0 -r 19 -u normal "Activating Hotkeys..."
    activate-hotkeys
    notify-send.sh --close=19
}


#-----------------------------------------------------------------------------------------------
# Hardware control
#-----------------------------------------------------------------------------------------------
volume() {
    if [ $1 = "up" ]; then
        amixer -D pulse set Master $VOLUME_STEP%+
    elif [ $1 = "down" ]; then
        amixer -D pulse set Master $VOLUME_STEP%-
    elif [ $1 = "toggle" ]; then
        amixer -D pulse set Master toggle
    fi
    if [ `pulsemixer --get-mute` -eq 1 ]; then
        notify-send.sh -t $NOTIFICATION_TIMEOUT -r 21 -u low Mute Volume
    else
        local volume=`pulsemixer --get-volume | sed -r 's/\s+.*$//'`
        # notify-send.sh -s 21 # Workaround notify-send.sh sometimes will not close volume notification
        notify-send.sh -t $NOTIFICATION_TIMEOUT -r 21 -u low $volume Volume
    fi
    pkill -RTMIN+10 i3blocks
}

brightness() {
    if [ $1 = "up" ]; then
        monitor-control bu | xargs -d '\n' notify-send.sh -t $NOTIFICATION_TIMEOUT -r 22 -u low && pkill -RTMIN+11 i3blocks
    elif [ $1 = "down" ]; then
        monitor-control bd | xargs -d '\n' notify-send.sh -t $NOTIFICATION_TIMEOUT -r 22 -u low && pkill -RTMIN+11 i3blocks
    elif [ $1 = "toggle" ]; then
        monitor-control bs | xargs -d '\n' notify-send.sh -t $NOTIFICATION_TIMEOUT -r 22 -u low && pkill -RTMIN+11 i3blocks
    elif [ $1 = "game" ]; then
        monitor-control bg | xargs -d '\n' notify-send.sh -t $NOTIFICATION_TIMEOUT -r 22 -u low && pkill -RTMIN+11 i3blocks
    else
        monitor-control b  | xargs -d '\n' notify-send.sh -t $NOTIFICATION_TIMEOUT -r 22 -u low && pkill -RTMIN+11 i3blocks
    fi
} 

display-input() {
    feature_id=60

    notify-send.sh -u normal -r 101 "Switching display input..." # ddcutil is slow on NVIDIA graphics, add notification to ease slow responsieness
    if [[ $1 != "toggle" ]]; then
        ddcutil setvcp $feature_id $1
    else
        if [ -z $DISPLAY_INPUTS ]; then
            DISPLAY_INPUTS=( # $ddcutil capabilities | grep --after-context=10 Input
                0x1  # D-Sub
                0xf  # DP
                0x11 # HDMI-1
                0x12 # HDMI-2
            )
        fi
        cur_input=`ddcutil getvcp $feature_id | awk '{print $NF}' | sed -e 's/.*=//' -e 's/)//'` # Get current input ID
        DISPLAY_INPUTS[${#DISPLAY_INPUTS[@]}]=${DISPLAY_INPUTS[0]}
        hit=0
        for input in ${DISPLAY_INPUTS[@]}; do
            [ $hit -eq 1 ] && ddcutil setvcp $feature_id $input && break
            [[ $input -eq $cur_input ]] && hit=1 && continue
        done
    fi
    notify-send.sh --close=101
}

suspend() {
    notify-send.sh -u critical -r 99 "Preparing to suspend..."
    sleep 0.7
    notify-send.sh --close=99
    SUSPEND_PRE_CMD
    systemctl suspend
}

display-standby() {
    sleep 0.3
    xset dpms force off
}

bluetooth-quick-connect() { toggle-bluetooth device "$BT_QUICK_CONNECT_DEVICE"; }

power-menu() {
    simple-rofi Menu ${POWER_WIDTH-23} POWER_ENTRIES
}

bluetooth-menu() {
    simple-rofi Bluetooth ${BLUETOOTH_WIDTH-28} BLUETOOTH_ENTRIES
}

wifi-menu() {
    simple-rofi WIFI ${WIFI_WIDTH-32} WIFI_ENTRIES
}

wol-menu() {
    simple-rofi Machine ${WOL_WIDTH-15} WOL_ENTRIES
}

mouse-profile-menu() {
    simple-rofi "Mouse Profile" 15 MOUSE_PROFILE_ENTRIES
}

quick-cmds-menu() {
    # simple-rofi "Apps" 15 QUICK_COMMAND_ENTRIES # -monitor -3

    local title="Apps"
    local width="15"
    # declare -A entries=("${QUICK_COMMAND_ENTRIES[@]}")

    # Sort rofi entries. Bash associative array key sequence is random
    local pre_sort=""
    for entry in "${!QUICK_COMMAND_ENTRIES[@]}"; do
        pre_sort=$pre_sort"$entry\n"
    done
    local rofiEntries=`printf "$pre_sort" | sort -k 1 -n`

    selection=`printf "$rofiEntries" | rofi -p "$title" -i -width -$width $ROFI_STYLES -monitor -3` 

    [ -z $selection ] && return 1
    ${QUICK_COMMAND_ENTRIES["$selection"]}
}

# game-mode() {
#     brightness game

#     source source-display-monitor # TODO: This extracts is_game_mode variable
#     [[ $is_game_mode ==  "true" ]] && touch /tmp/game_mode || rm -f /tmp/game_mode
#     activate-hotkeys
# }

on-192-click() {
    infinite-scroll is-scrolling && infiniteScroll stop && exit
    activate-hotkeys is-hyperscroll && activate-hotkeys toggle-hyperscroll && exit
    activate-hotkeys toggle-mouse-mode
    # if activate-hotkeys is-hyperscroll; then
    #     activate-hotkeys toggle-hyperscroll
    # else
    #     activate-hotkeys toggle-mouse-mode
    # fi
    is-double-click 192
    case $? in
        0) # Cancel action
            ;;
        1) # Single click with delayed action
            # activate-hotkeys toggle-mouse-mode
            ;;
        2) # Double click
            activate-hotkeys mouse-mode normal
            activate-hotkeys toggle-hyperscroll
            ;;
    esac
}


#-----------------------------------------------------------------------------------------------
# Execute
# TODO: Input validation
#-----------------------------------------------------------------------------------------------
[[ $# == 0 ]] || $@


# Deprecated: result is unreliable. e.g. getting incorrect pid from sxiv
# activeWinPid() {
#     pid=`xdotool getactivewindow getwindowpid`
#     result=$?
#     echo $pid
#     return $result
# }
