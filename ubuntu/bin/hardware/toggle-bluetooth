#!/bin/bash -ue
. log.sh

command=${1-toggle}

#------------------------------------------------------------------------------
# Use rfkill to power down bluetooth rx/tx.
# It is not clear whether using blacklist bluetooth kernel module disables bluetooth or power down bluetooth
#
# Reference: https://stackoverflow.com/questions/818255/in-the-shell-what-does-21-mean
#------------------------------------------------------------------------------
is-bluetooth-enabled() {
    bluetoothctl show | grep -q "Powered: yes"
    # rfkill --output TYPE,SOFT | grep bluetooth | grep -q unblocked
}

has-connected-device() {
    bluetoothctl info >/dev/null
}

disable-bluetooth() {
    bluetoothctl power off
    # rfkill block   bluetooth && sudo systemctl disable bluetooth.service 2> /dev/null && sudo systemctl stop  bluetooth.service # && notify-send "Bluetooth disabled"
}

enable-bluetooth() {
    bluetoothctl power on
    # rfkill unblock bluetooth && sudo systemctl enable  bluetooth.service 2> /dev/null && sudo systemctl start bluetooth.service # && notify-send "Bluetooth enabled"
}

case "$command" in
    toggle)
        is-bluetooth-enabled && (disable-bluetooth && notify-send "Bluetooth Disabled") || (enable-bluetooth && notify-send "Bluetooth Enabled")
        ;;
    enable)
        enable-bluetooth  && notify-send -u low "Bluetooth Enabled"
        ;;
    disable)
        disable-bluetooth && notify-send -u low "Bluetooth Disabled"
        ;;
    device)
        device="${@:2}"
        mac=`bluetoothctl devices | grep "$device" | awk '{print $2}'` # TODO: Error check device existence
        # auto_off=${3-false}
        if bluetoothctl info $mac | grep -q 'Connected: yes'; then
            notify-send.sh -t 0 -r 30 -u low "Disconnecting..." "$device"
            bluetoothctl disconnect $mac && notify-send.sh -t 5000 -r 30 -u normal "Disconnected" "$device" || notify-send.sh -t 5000 -r 30 -u critical "Disconnection Failed" "$device"
            # [ $auto_off == "true" ] && (has-connected-device || disable-bluetooth) # Automatically turn off bluetooth there is no more connected bluetooth device
        else                                                         
            notify-send.sh -t 0 -r 30 -u low "Connecting..." "$device"
            has-connected-device || enable-bluetooth
            bluetoothctl connect    $mac && notify-send.sh -t 5000 -r 30 -u normal "Connected"    "$device" || notify-send.sh -t 5000 -r 30 -u critical "Connection Failed"    "$device"
        fi
        ;;
    *)
        echo
        info Usage: ${0##*/} [enable/disable/toggle/device]
        echo
        echo If argument is not provided, it will toggle bluetooth between enable/disable.
        echo
        notify-send "Invalid command" "Use enable/disable/toggle/device or no argument (same as toggle)"
        ;;
esac
