#!/bin/bash -ue

inputs=`xinput --list --short`

mouse_alt="/tmp/mouse-alt"
keyboard_alt="/tmp/keyboard-alt"

bind-dualkeys() {
    # Dual-purpose modifiers
    # Caps lock    : Esc
    # Left alt     : alt+tab
    # Left Windows : App launcher
    # Left ctrl    : No binding due to frequent usage to prevent accidental trigger
    # Right ctrl   : Toggle keyboard layer
    # Right Windows: No binding due to no such key on most laptops
    # Right alt    : Toggle input method
    xcapeTyping="Alt_R=Super_L|space;Control_L=Escape;Control_R=XF86Launch2"
    # [ -f $keyboard_alt ] && xcapeTyping="$xcapeTyping;Mode_switch=XF86Launch2"
    xcapeLauncher="Super_L=Super_L|F12"
    xcapeAppSwitcher="Alt_L=Alt_L|Tab"
    xcapeMouse="Hyper_L=XF86Launch7;XF86Launch5=XF86Launch8"

    pgrep xcape > /dev/null && pkill xcape
    if [[ $XDG_CURRENT_DESKTOP == "i3" ]]; then
        xcape -e "$xcapeTyping;$xcapeAppSwitcher;$xcapeMouse;$xcapeLauncher"
    else
        xcape -e "$xcapeTyping;$xcapeAppSwitcher;$xcapeMouse"
    fi
}

bind-hotkeys() {
    # Keyboard keybindings
    cat ~/.config/xbindkeys/keyboard >  /tmp/xbindkeysrc
    echo "$inputs" | grep -q "Designer Keyboard" && cat ~/.config/xbindkeys/microsoft-designer-keyboard >> /tmp/xbindkeysrc

    # Mouse keybindings
    echo "$inputs" | grep -q "Razer Basilisk.*pointer" && \
        ([ -f $mouse_alt ] && cat ~/.config/xbindkeys/razer-basilisk-alt >> /tmp/xbindkeysrc || cat ~/.config/xbindkeys/razer-basilisk >> /tmp/xbindkeysrc)
    
    pgrep xbindkeys > /dev/null && pkill xbindkeys # xbindkeys prevents multiple instance by itself
    xbindkeys -f /tmp/xbindkeysrc
}

set-mouse-scroll-speed() {
    pgrep imwheel > /dev/null && pkill imwheel

    if echo "$inputs" | grep -q \
       -e "Razer.*pointer"; then
        imwheel -b "4 5" > /dev/null 2>&1 # Restrict imwheel to only affect scroll wheel. If unrestricted, thumb buttons will not work anymore
    fi
}

# Remove all alt mode and rebind hotkeys
init() {
    [ -f  $mouse_alt      ] && rm  $mouse_alt      && notify-send.sh --close=10
    [ -f  $keyboard_alt   ] && rm  $keyboard_alt   && notify-send.sh --close=11
    [ -f "$keyboard_alt"2 ] && rm "$keyboard_alt"2 && notify-send.sh --close=11
    xmodmap ~/.config/Xmodmap/modifiers
    xmodmap -e 'remove control = Mode_switch'
    xmodmap -e 'add mod5 = Mode_switch'
    xmodmap ~/.Xmodmap
    bind-dualkeys
    bind-hotkeys
}

mouse-mode() {
    mode=$1
    if [ $mode = "normal" ]; then
        [ -f $mouse_alt ] && rm $mouse_alt
        notify-send.sh --close=10 # notify-send.sh supports expiration time and closing notifications (https://askubuntu.com/questions/110969/notify-send-ignores-timeout)
    else
        touch $mouse_alt
        notify-send.sh -t 0 -r 10 -u critical Alt Mouse
    fi

    # set-mouse-scroll-speed # When xbindkeys binds mouse buttons, imwheel won't work. Also vice versa.
    bind-hotkeys
}

toggle-mouse-mode() { [ -f $mouse_alt ] && mouse-mode normal || mouse-mode alternate; }

toggle-keyboard-alt() {
    [ -f "$keyboard_alt"2 ] && rm "$keyboard_alt"2
    if [ -f $keyboard_alt ]; then
        rm $keyboard_alt
        xmodmap ~/.Xmodmap
        # bind-dualkeys
        notify-send.sh --close=11
    else
        touch $keyboard_alt
        xmodmap ~/.config/Xmodmap/alt
        # bind-dualkeys
        notify-send.sh -t 0 -r 11 -u critical Nav Keyboard # Alternate layer is only used for easier navigation
        # notify-send.sh -t 0 -r 11 -u critical Alt Keyboard
    fi
}

# toggle-keyboard-alt2() {
#     [ -f $keyboard_alt ] && rm $keyboard_alt
#     if [ -f "$keyboard_alt"2 ]; then
#         rm "$keyboard_alt"2
#         xmodmap ~/.Xmodmap
#         notify-send.sh --close=11
#     else
#         touch "$keyboard_alt"2
#         xmodmap ~/.config/Xmodmap/alt2
#         # notify-send.sh -t 0 -r 11 -u critical Alt2 Keyboard
#     fi
# }


# 
# Main
#
if [ $# == 0 ]; then
    init
else
    $@
fi
