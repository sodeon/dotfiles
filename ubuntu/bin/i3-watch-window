#!/bin/bash -ue
. autohotkey
#------------------------------------------------------------------------------
# Helpers
#------------------------------------------------------------------------------
try-focus-non-floating() { # Floating window will always get last priority for input focus
    if isActiveWinFloating; then
        i3-msg "focus mode_toggle" || true # If there is only floating window, "focus mode_toggle" won't do anything
    fi
}

workspace-num() {
    i3-msg -t get_workspaces | jq ".[] .num" | wc -l
}

is-workspace() {
    i3-msg -t get_workspaces | jq ".[] | select(.num == $1) .focused" | grep true
}

check-and-handle-empty-workspace() {
    # Default workspace: terminal (if all apps are closed, open new terminal automatically)
    # Normal workspace: web (at the time of writing, same behavior as placeholder workspace)
    # Placeholder workspace: all except web and terminal (all placeholder workspaces will be destroyed automatically when last app closed)

    # Default workspace handling: re-launch terminal when all apps are closed
    try-focus-non-floating
    is-workspace 2 && isWorkspaceEmpty && (urxvtc && return 0 || return 1)

    # This script will try to avoid empty workspace. When only floating windows are in the workspace, it is also defined as empty workspace.
    # When empty workspace is detected, it tries to jump to different workspace as following order: last workspace -> terminal workspace (-> any remaining available workspace, path never reached)
    # NOTE: This behavior is designed for only one floating window in use
    if isWorkspaceEmpty; then # Check if workspace is empty
        i3-msg "workspace back_and_forth"
        try-focus-non-floating # Again, try to focus non-floating window after switching workspace.
        if isWorkspaceEmpty; then # Check if workspace is empty
            i3-msg 'workspace number "2: Term "'
            try-focus-non-floating # Again, try to focus non-floating window after switching workspace.
            # Following will never reach as terminal workspace will always have at least one terminal
            # if isWorkspaceEmpty; then # Even terminal workspace is empty, try to find any non-empty workspace
            #     for i in $(seq 1 $(workspace-num)); do
            #         workspace=$(i3-msg -t get_workspaces | jq ".[$((i-1))] .num")
            #         if [[ $(i3-msg -t get_workspaces | jq ".[$((i-1))] .focused") == "false" ]]; then
            #             i3-msg "workspace number $workspace"
            #             try-focus-non-floating # Again, try to focus non-floating window after switching workspace.
            #             break
            #         fi
            #     done
            # fi
        fi
    fi
}


#------------------------------------------------------------------------------
# Window event handlers
#------------------------------------------------------------------------------
win-close-handler() {
    check-and-handle-empty-workspace
}

win-move-handler() {
    check-and-handle-empty-workspace
}

win-enter-fullscreen-handler() {
    :
}


#------------------------------------------------------------------------------
# Main
#------------------------------------------------------------------------------
i3-msg -t subscribe -m '[ "window" ]' | \
while read -r event; do 
    # Update window title on i3blocks
    pkill -RTMIN+13 i3blocks

    if echo $event | grep -q '^{"change":"close",'; then
        win-close-handler
    fi

    # if echo $event | grep -q '^{"change":"move",'; then
    #     win-move-handler
    # fi

    # if echo $event | grep -q '^{"change":"fullscreen_mode",'; then
    #     if echo $event | grep -q ',"fullscreen_mode":1,'; then
    #         win-enter-fullscreen-handler
    #     fi
    # fi
done
